// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: instance_types.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstanceType = `-- name: CreateInstanceType :exec
INSERT INTO instance_types (
    provider,
    name,
    cpu_count,
    cpu_architecture,
    memory_mib,
    gpu_kind,
    gpu_count
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateInstanceTypeParams struct {
	Provider        Provider
	Name            string
	CpuCount        int32
	CpuArchitecture CpuArchitecture
	MemoryMib       int32
	GpuKind         NullGpuKind
	GpuCount        pgtype.Int4
}

func (q *Queries) CreateInstanceType(ctx context.Context, arg CreateInstanceTypeParams) error {
	_, err := q.db.Exec(ctx, createInstanceType,
		arg.Provider,
		arg.Name,
		arg.CpuCount,
		arg.CpuArchitecture,
		arg.MemoryMib,
		arg.GpuKind,
		arg.GpuCount,
	)
	return err
}

const getInstanceType = `-- name: GetInstanceType :one
SELECT provider, name, cpu_count, cpu_architecture, memory_mib, gpu_kind, gpu_count
FROM instance_types
WHERE provider = $1 AND name = $2
`

type GetInstanceTypeParams struct {
	Provider Provider
	Name     string
}

func (q *Queries) GetInstanceType(ctx context.Context, arg GetInstanceTypeParams) (InstanceType, error) {
	row := q.db.QueryRow(ctx, getInstanceType, arg.Provider, arg.Name)
	var i InstanceType
	err := row.Scan(
		&i.Provider,
		&i.Name,
		&i.CpuCount,
		&i.CpuArchitecture,
		&i.MemoryMib,
		&i.GpuKind,
		&i.GpuCount,
	)
	return i, err
}
