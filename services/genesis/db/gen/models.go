// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CpuArchitecture string

const (
	CpuArchitectureX8664 CpuArchitecture = "x86-64"
	CpuArchitectureArm64 CpuArchitecture = "arm64"
)

func (e *CpuArchitecture) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CpuArchitecture(s)
	case string:
		*e = CpuArchitecture(s)
	default:
		return fmt.Errorf("unsupported scan type for CpuArchitecture: %T", src)
	}
	return nil
}

type NullCpuArchitecture struct {
	CpuArchitecture CpuArchitecture
	Valid           bool // Valid is true if CpuArchitecture is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCpuArchitecture) Scan(value interface{}) error {
	if value == nil {
		ns.CpuArchitecture, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CpuArchitecture.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCpuArchitecture) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CpuArchitecture), nil
}

type GpuKind string

const (
	GpuKindNvidiaTeslaK80      GpuKind = "nvidia-tesla-k80"
	GpuKindNvidiaTeslaM60      GpuKind = "nvidia-tesla-m60"
	GpuKindNvidiaTeslaP100     GpuKind = "nvidia-tesla-p100"
	GpuKindNvidiaTeslaP4       GpuKind = "nvidia-tesla-p4"
	GpuKindNvidiaTeslaV100     GpuKind = "nvidia-tesla-v100"
	GpuKindNvidiaTeslaT4       GpuKind = "nvidia-tesla-t4"
	GpuKindNvidiaTeslaA100     GpuKind = "nvidia-tesla-a100"
	GpuKindNvidiaTeslaA10      GpuKind = "nvidia-tesla-a10"
	GpuKindNvidiaTeslaA10080gb GpuKind = "nvidia-tesla-a100-80gb"
)

func (e *GpuKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GpuKind(s)
	case string:
		*e = GpuKind(s)
	default:
		return fmt.Errorf("unsupported scan type for GpuKind: %T", src)
	}
	return nil
}

type NullGpuKind struct {
	GpuKind GpuKind
	Valid   bool // Valid is true if GpuKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGpuKind) Scan(value interface{}) error {
	if value == nil {
		ns.GpuKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GpuKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGpuKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GpuKind), nil
}

type InstanceOwner string

const (
	InstanceOwnerScheduler InstanceOwner = "scheduler"
)

func (e *InstanceOwner) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InstanceOwner(s)
	case string:
		*e = InstanceOwner(s)
	default:
		return fmt.Errorf("unsupported scan type for InstanceOwner: %T", src)
	}
	return nil
}

type NullInstanceOwner struct {
	InstanceOwner InstanceOwner
	Valid         bool // Valid is true if InstanceOwner is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInstanceOwner) Scan(value interface{}) error {
	if value == nil {
		ns.InstanceOwner, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InstanceOwner.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInstanceOwner) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InstanceOwner), nil
}

type Provider string

const (
	ProviderAmazonWebServices   Provider = "amazon-web-services"
	ProviderGoogleCloudPlatform Provider = "google-cloud-platform"
)

func (e *Provider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Provider(s)
	case string:
		*e = Provider(s)
	default:
		return fmt.Errorf("unsupported scan type for Provider: %T", src)
	}
	return nil
}

type NullProvider struct {
	Provider Provider
	Valid    bool // Valid is true if Provider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProvider) Scan(value interface{}) error {
	if value == nil {
		ns.Provider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Provider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Provider), nil
}

type Instance struct {
	ID                 uuid.UUID
	Provider           Provider
	ProviderID         string
	Zone               string
	Owner              InstanceOwner
	InstanceType       string
	IsSpot             bool
	CpuCountRequested  int32
	MemoryMibRequested int32
	MemoryMibReserved  int32
	GpuCountRequested  int32
	BootImage          string
	Hostname           pgtype.Text
	CreatedAt          time.Time
	BootedAt           pgtype.Timestamptz
	StartedAt          pgtype.Timestamptz
	DeletedAt          pgtype.Timestamptz
	IsDeletionTriaged  bool
}

type InstanceType struct {
	Provider        Provider
	Name            string
	CpuCount        int32
	CpuArchitecture CpuArchitecture
	MemoryMib       int32
	GpuKind         NullGpuKind
	GpuCount        pgtype.Int4
}
