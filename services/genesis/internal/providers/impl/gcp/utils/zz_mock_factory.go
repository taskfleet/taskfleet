// Code generated by mockery v2.14.1. DO NOT EDIT.

package gcputils

import (
	compute "cloud.google.com/go/compute/apiv1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientFactory is an autogenerated mock type for the ClientFactory type
type MockClientFactory struct {
	mock.Mock
}

type MockClientFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientFactory) EXPECT() *MockClientFactory_Expecter {
	return &MockClientFactory_Expecter{mock: &_m.Mock}
}

// AcceleratorTypes provides a mock function with given fields:
func (_m *MockClientFactory) AcceleratorTypes() *compute.AcceleratorTypesClient {
	ret := _m.Called()

	var r0 *compute.AcceleratorTypesClient
	if rf, ok := ret.Get(0).(func() *compute.AcceleratorTypesClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.AcceleratorTypesClient)
		}
	}

	return r0
}

// MockClientFactory_AcceleratorTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceleratorTypes'
type MockClientFactory_AcceleratorTypes_Call struct {
	*mock.Call
}

// AcceleratorTypes is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) AcceleratorTypes() *MockClientFactory_AcceleratorTypes_Call {
	return &MockClientFactory_AcceleratorTypes_Call{Call: _e.mock.On("AcceleratorTypes")}
}

func (_c *MockClientFactory_AcceleratorTypes_Call) Run(run func()) *MockClientFactory_AcceleratorTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_AcceleratorTypes_Call) Return(_a0 *compute.AcceleratorTypesClient) *MockClientFactory_AcceleratorTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

// DiskTypes provides a mock function with given fields:
func (_m *MockClientFactory) DiskTypes() *compute.DiskTypesClient {
	ret := _m.Called()

	var r0 *compute.DiskTypesClient
	if rf, ok := ret.Get(0).(func() *compute.DiskTypesClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.DiskTypesClient)
		}
	}

	return r0
}

// MockClientFactory_DiskTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiskTypes'
type MockClientFactory_DiskTypes_Call struct {
	*mock.Call
}

// DiskTypes is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) DiskTypes() *MockClientFactory_DiskTypes_Call {
	return &MockClientFactory_DiskTypes_Call{Call: _e.mock.On("DiskTypes")}
}

func (_c *MockClientFactory_DiskTypes_Call) Run(run func()) *MockClientFactory_DiskTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_DiskTypes_Call) Return(_a0 *compute.DiskTypesClient) *MockClientFactory_DiskTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

// Instances provides a mock function with given fields:
func (_m *MockClientFactory) Instances() *compute.InstancesClient {
	ret := _m.Called()

	var r0 *compute.InstancesClient
	if rf, ok := ret.Get(0).(func() *compute.InstancesClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.InstancesClient)
		}
	}

	return r0
}

// MockClientFactory_Instances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instances'
type MockClientFactory_Instances_Call struct {
	*mock.Call
}

// Instances is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) Instances() *MockClientFactory_Instances_Call {
	return &MockClientFactory_Instances_Call{Call: _e.mock.On("Instances")}
}

func (_c *MockClientFactory_Instances_Call) Run(run func()) *MockClientFactory_Instances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_Instances_Call) Return(_a0 *compute.InstancesClient) *MockClientFactory_Instances_Call {
	_c.Call.Return(_a0)
	return _c
}

// MachineTypes provides a mock function with given fields:
func (_m *MockClientFactory) MachineTypes() *compute.MachineTypesClient {
	ret := _m.Called()

	var r0 *compute.MachineTypesClient
	if rf, ok := ret.Get(0).(func() *compute.MachineTypesClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.MachineTypesClient)
		}
	}

	return r0
}

// MockClientFactory_MachineTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MachineTypes'
type MockClientFactory_MachineTypes_Call struct {
	*mock.Call
}

// MachineTypes is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) MachineTypes() *MockClientFactory_MachineTypes_Call {
	return &MockClientFactory_MachineTypes_Call{Call: _e.mock.On("MachineTypes")}
}

func (_c *MockClientFactory_MachineTypes_Call) Run(run func()) *MockClientFactory_MachineTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_MachineTypes_Call) Return(_a0 *compute.MachineTypesClient) *MockClientFactory_MachineTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

// Networks provides a mock function with given fields:
func (_m *MockClientFactory) Networks() *compute.NetworksClient {
	ret := _m.Called()

	var r0 *compute.NetworksClient
	if rf, ok := ret.Get(0).(func() *compute.NetworksClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.NetworksClient)
		}
	}

	return r0
}

// MockClientFactory_Networks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Networks'
type MockClientFactory_Networks_Call struct {
	*mock.Call
}

// Networks is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) Networks() *MockClientFactory_Networks_Call {
	return &MockClientFactory_Networks_Call{Call: _e.mock.On("Networks")}
}

func (_c *MockClientFactory_Networks_Call) Run(run func()) *MockClientFactory_Networks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_Networks_Call) Return(_a0 *compute.NetworksClient) *MockClientFactory_Networks_Call {
	_c.Call.Return(_a0)
	return _c
}

// Zones provides a mock function with given fields:
func (_m *MockClientFactory) Zones() *compute.ZonesClient {
	ret := _m.Called()

	var r0 *compute.ZonesClient
	if rf, ok := ret.Get(0).(func() *compute.ZonesClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ZonesClient)
		}
	}

	return r0
}

// MockClientFactory_Zones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Zones'
type MockClientFactory_Zones_Call struct {
	*mock.Call
}

// Zones is a helper method to define mock.On call
func (_e *MockClientFactory_Expecter) Zones() *MockClientFactory_Zones_Call {
	return &MockClientFactory_Zones_Call{Call: _e.mock.On("Zones")}
}

func (_c *MockClientFactory_Zones_Call) Run(run func()) *MockClientFactory_Zones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientFactory_Zones_Call) Return(_a0 *compute.ZonesClient) *MockClientFactory_Zones_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockClientFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClientFactory creates a new instance of MockClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClientFactory(t mockConstructorTestingTNewMockClientFactory) *MockClientFactory {
	mock := &MockClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
