// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: genesis/messages/v1/instance_event.proto

package genesis_messages

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InstanceEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InstanceEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceEventMultiError, or
// nil if none found.
func (m *InstanceEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceEventValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceEventValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceEventValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceEventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceEventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceEventValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Event.(type) {

	case *InstanceEvent_Created:

		if all {
			switch v := interface{}(m.GetCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceEventValidationError{
						field:  "Created",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceEventValidationError{
						field:  "Created",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceEventValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InstanceEvent_CreationFailed:

		if all {
			switch v := interface{}(m.GetCreationFailed()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceEventValidationError{
						field:  "CreationFailed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceEventValidationError{
						field:  "CreationFailed",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreationFailed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceEventValidationError{
					field:  "CreationFailed",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InstanceEvent_Deleted:

		if all {
			switch v := interface{}(m.GetDeleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceEventValidationError{
						field:  "Deleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceEventValidationError{
						field:  "Deleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceEventValidationError{
					field:  "Deleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InstanceEventMultiError(errors)
	}

	return nil
}

// InstanceEventMultiError is an error wrapping multiple validation errors
// returned by InstanceEvent.ValidateAll() if the designated constraints
// aren't met.
type InstanceEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceEventMultiError) AllErrors() []error { return m }

// InstanceEventValidationError is the validation error returned by
// InstanceEvent.Validate if the designated constraints aren't met.
type InstanceEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceEventValidationError) ErrorName() string { return "InstanceEventValidationError" }

// Error satisfies the builtin error interface
func (e InstanceEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceEventValidationError{}

// Validate checks the field values on InstanceCreatedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceCreatedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceCreatedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceCreatedEventMultiError, or nil if none found.
func (m *InstanceCreatedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceCreatedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceCreatedEventValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceCreatedEventValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceCreatedEventValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceCreatedEventValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceCreatedEventValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceCreatedEventValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Hostname

	if len(errors) > 0 {
		return InstanceCreatedEventMultiError(errors)
	}

	return nil
}

// InstanceCreatedEventMultiError is an error wrapping multiple validation
// errors returned by InstanceCreatedEvent.ValidateAll() if the designated
// constraints aren't met.
type InstanceCreatedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceCreatedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceCreatedEventMultiError) AllErrors() []error { return m }

// InstanceCreatedEventValidationError is the validation error returned by
// InstanceCreatedEvent.Validate if the designated constraints aren't met.
type InstanceCreatedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceCreatedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceCreatedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceCreatedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceCreatedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceCreatedEventValidationError) ErrorName() string {
	return "InstanceCreatedEventValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceCreatedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceCreatedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceCreatedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceCreatedEventValidationError{}

// Validate checks the field values on InstanceCreationFailedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceCreationFailedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceCreationFailedEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceCreationFailedEventMultiError, or nil if none found.
func (m *InstanceCreationFailedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceCreationFailedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return InstanceCreationFailedEventMultiError(errors)
	}

	return nil
}

// InstanceCreationFailedEventMultiError is an error wrapping multiple
// validation errors returned by InstanceCreationFailedEvent.ValidateAll() if
// the designated constraints aren't met.
type InstanceCreationFailedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceCreationFailedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceCreationFailedEventMultiError) AllErrors() []error { return m }

// InstanceCreationFailedEventValidationError is the validation error returned
// by InstanceCreationFailedEvent.Validate if the designated constraints
// aren't met.
type InstanceCreationFailedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceCreationFailedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceCreationFailedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceCreationFailedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceCreationFailedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceCreationFailedEventValidationError) ErrorName() string {
	return "InstanceCreationFailedEventValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceCreationFailedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceCreationFailedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceCreationFailedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceCreationFailedEventValidationError{}

// Validate checks the field values on InstanceDeletedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstanceDeletedEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceDeletedEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceDeletedEventMultiError, or nil if none found.
func (m *InstanceDeletedEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceDeletedEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	if len(errors) > 0 {
		return InstanceDeletedEventMultiError(errors)
	}

	return nil
}

// InstanceDeletedEventMultiError is an error wrapping multiple validation
// errors returned by InstanceDeletedEvent.ValidateAll() if the designated
// constraints aren't met.
type InstanceDeletedEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceDeletedEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceDeletedEventMultiError) AllErrors() []error { return m }

// InstanceDeletedEventValidationError is the validation error returned by
// InstanceDeletedEvent.Validate if the designated constraints aren't met.
type InstanceDeletedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceDeletedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceDeletedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceDeletedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceDeletedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceDeletedEventValidationError) ErrorName() string {
	return "InstanceDeletedEventValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceDeletedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceDeletedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceDeletedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceDeletedEventValidationError{}
