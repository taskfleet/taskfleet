// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: genesis/v1/service.proto

package genesis

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ListZonesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListZonesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListZonesRequestValidationError is the validation error returned by
// ListZonesRequest.Validate if the designated constraints aren't met.
type ListZonesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListZonesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListZonesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListZonesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListZonesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListZonesRequestValidationError) ErrorName() string { return "ListZonesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListZonesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListZonesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListZonesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListZonesRequestValidationError{}

// Validate checks the field values on ListZonesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListZonesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetZones() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListZonesResponseValidationError{
					field:  fmt.Sprintf("Zones[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListZonesResponseValidationError is the validation error returned by
// ListZonesResponse.Validate if the designated constraints aren't met.
type ListZonesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListZonesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListZonesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListZonesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListZonesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListZonesResponseValidationError) ErrorName() string {
	return "ListZonesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListZonesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListZonesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListZonesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListZonesResponseValidationError{}

// Validate checks the field values on Zone with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Zone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Provider

	// no validation rules for Name

	return nil
}

// ZoneValidationError is the validation error returned by Zone.Validate if the
// designated constraints aren't met.
type ZoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoneValidationError) ErrorName() string { return "ZoneValidationError" }

// Error satisfies the builtin error interface
func (e ZoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoneValidationError{}

// Validate checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Owner

	// no validation rules for Component

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequestValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PreferHpc

	return nil
}

// CreateInstanceRequestValidationError is the validation error returned by
// CreateInstanceRequest.Validate if the designated constraints aren't met.
type CreateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequestValidationError) ErrorName() string {
	return "CreateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequestValidationError{}

// Validate checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateInstanceResponseValidationError is the validation error returned by
// CreateInstanceResponse.Validate if the designated constraints aren't met.
type CreateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceResponseValidationError) ErrorName() string {
	return "CreateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Owner

	return nil
}

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on RunningInstance with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RunningInstance) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunningInstanceValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Component

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunningInstanceValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunningInstanceValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Hostname

	return nil
}

// RunningInstanceValidationError is the validation error returned by
// RunningInstance.Validate if the designated constraints aren't met.
type RunningInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunningInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunningInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunningInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunningInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunningInstanceValidationError) ErrorName() string { return "RunningInstanceValidationError" }

// Error satisfies the builtin error interface
func (e RunningInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunningInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunningInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunningInstanceValidationError{}

// Validate checks the field values on ShutdownInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShutdownInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShutdownInstanceRequestValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ShutdownInstanceRequestValidationError is the validation error returned by
// ShutdownInstanceRequest.Validate if the designated constraints aren't met.
type ShutdownInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownInstanceRequestValidationError) ErrorName() string {
	return "ShutdownInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownInstanceRequestValidationError{}

// Validate checks the field values on ShutdownInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ShutdownInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ShutdownInstanceResponseValidationError is the validation error returned by
// ShutdownInstanceResponse.Validate if the designated constraints aren't met.
type ShutdownInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShutdownInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShutdownInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShutdownInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShutdownInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShutdownInstanceResponseValidationError) ErrorName() string {
	return "ShutdownInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShutdownInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShutdownInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShutdownInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShutdownInstanceResponseValidationError{}
