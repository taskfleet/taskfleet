syntax = "proto3";
package genesis.v1;

option go_package = "go.taskfleet.io/grpc/gen/go/genesis/v1;genesis";

import "genesis/v1/types.proto";
import "validate/validate.proto";

// Genesis is a service that enables dynamically creating and deleting compute instances.
service GenesisService {
    // ListZones returns a list of all providers' available zones. For each zone, it additionally
    // returns a list of available GPUs. This call should be used to send correct zone identifiers
    // to the `CreateInstance call.`
    rpc ListZones(ListZonesRequest) returns (ListZonesResponse);

    // CreateInstance creates a new instance according to the given requirements. If the creation
    // is successful, the instance configuration will be returned. The full instance status
    // (including its IP) will be delivered via Kafka as soon as the instance is up and running.
    rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceResponse);

    // ListInstances returns all the instances that are owned by a particular owner and which are
    // running at the moment. In particular, the returned set of instances does not include
    // instances which were requested successfully but are not running yet.
    rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse);

    // ShutdownInstance shuts down the instance described by the request. It does not return
    // anything if deletion was successful.
    rpc ShutdownInstance(ShutdownInstanceRequest) returns (ShutdownInstanceResponse);
}

message ListZonesRequest {}

message ListZonesResponse {
    // A list of available zones.
    repeated Zone zones = 1;
}

message Zone {
    // The provider to which this zone belongs.
    Provider provider = 1;
    // The provider-specific name of the zone.
    string name = 2;
    // The GPUs available in this zone.
    repeated GPUKind available_gpus = 3;
}

message CreateInstanceRequest {
    // The unique ID of the instance to create. The ID shall be generated by the client to make it
    // easier to link created instances to those delivered via Kafka.
    string id = 1 [(validate.rules).string.uuid = true];
    // An arbitrary non-empty string to identify the caller. It can be reused to fetch all
    // instances that were created by the caller. Should thus be a globally unique string.
    string owner = 2 [(validate.rules).string.min_len = 1];
    // The component for which to create an instance. An error is returned if no configuration for
    // the component can be found.
    string component = 3 [(validate.rules).string.min_len = 1];
    // The desired configuration of the instance.
    InstanceConfig config = 4 [(validate.rules).message.required = true];
    // The desired amount of resources on the instance.
    InstanceResources resources = 5 [(validate.rules).message.required = true];
    // Whether the instance is required for high-performance computing. In that case, compute-
    // optimized instances are preferably created.
    bool prefer_hpc = 6;
}

message CreateInstanceResponse {
    // A unique reference to the instance that will be created.
    Instance instance = 1;
    // The actual configuration of the instance. Echo'ed from the request.
    InstanceConfig config = 2;
    // The available resources on the instance.
    InstanceResources resources = 3;
}

message ListInstancesRequest {
    // The name of the instances' owner, i.e. the component having created the instances. Should
    // coincide with the `owner` string passed when creating instances.
    string owner = 1 [(validate.rules).string.min_len = 1];
}

message ListInstancesResponse {
    // The instances owned by the owner specified in the request which are currently running.
    repeated RunningInstance instances = 1;
}

message RunningInstance {
    // The unique reference to the instance.
    Instance instance = 1;
    // The component for which the instance was created.
    string component = 2;
    // The configuration of the instance.
    InstanceConfig config = 3;
    // The available resources on the instance.
    InstanceResources resources = 4;
    // The hostname of the instance.
    string hostname = 5;
}

message ShutdownInstanceRequest {
    // The instance to shut down.
    Instance instance = 1 [(validate.rules).message.required = true];
}

message ShutdownInstanceResponse {}
